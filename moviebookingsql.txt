CREATE DATABASE MovieBooking;
USE MovieBooking;

-- Users Table
CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    phone VARCHAR(15)
);

-- Movies Table
CREATE TABLE Movies (
    movie_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100),
    genre VARCHAR(50),
    duration INT, -- in minutes
    release_date DATE
);

-- Theatres Table
CREATE TABLE Theatres (
    theatre_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    location VARCHAR(100),
    capacity INT
);

-- Shows Table
CREATE TABLE Shows (
    show_id INT AUTO_INCREMENT PRIMARY KEY,
    movie_id INT,
    theatre_id INT,
    show_time DATETIME,
    price DECIMAL(8,2),
    FOREIGN KEY (movie_id) REFERENCES Movies(movie_id),
    FOREIGN KEY (theatre_id) REFERENCES Theatres(theatre_id)
);

-- Bookings Table
CREATE TABLE Bookings (
    booking_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    show_id INT,
    seats INT,
    booking_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (show_id) REFERENCES Shows(show_id)
);

-- Payments Table
CREATE TABLE Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    booking_id INT,
    amount DECIMAL(8,2),
    method VARCHAR(50),
    status VARCHAR(20),
    FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id)
);



USE MovieBooking;

-- Insert Users
INSERT INTO Users (name, email, phone) VALUES
('Amit Sharma', 'amit@example.com', '9876543210'),
('Priya Singh', 'priya@example.com', '9123456780'),
('Rahul Mehta', 'rahul@example.com', '9988776655');

-- Insert Movies
INSERT INTO Movies (title, genre, duration, release_date) VALUES
('Inception', 'Sci-Fi', 148, '2010-07-16'),
('The Dark Knight', 'Action', 152, '2008-07-18'),
('Interstellar', 'Sci-Fi', 169, '2014-11-07'),
('Dangal', 'Drama', 161, '2016-12-23'),
('3 Idiots', 'Comedy-Drama', 170, '2009-12-25');

-- Insert Theatres
INSERT INTO Theatres (name, location, capacity) VALUES
('PVR Cinemas', 'Mumbai', 200),
('INOX', 'Delhi', 180),
('Carnival Cinemas', 'Bangalore', 220);

-- Insert Shows
INSERT INTO Shows (movie_id, theatre_id, show_time, price) VALUES
(1, 1, '2025-09-17 14:00:00', 250.00),
(1, 2, '2025-09-17 18:00:00', 300.00),
(2, 1, '2025-09-17 20:00:00', 280.00),
(3, 3, '2025-09-18 16:00:00', 350.00),
(4, 2, '2025-09-18 19:00:00', 200.00),
(5, 3, '2025-09-19 15:00:00', 220.00);

SELECT m.title, t.name AS theatre, s.show_time, s.price
FROM Shows s
JOIN Movies m ON s.movie_id = m.movie_id
JOIN Theatres t ON s.theatre_id = t.theatre_id
WHERE m.title = 'Inception';


SELECT b.booking_id, u.name, m.title, t.name AS theatre, b.seats, p.amount, p.status
FROM Bookings b
JOIN Users u ON b.user_id = u.user_id
JOIN Shows s ON b.show_id = s.show_id
JOIN Movies m ON s.movie_id = m.movie_id
JOIN Theatres t ON s.theatre_id = t.theatre_id
JOIN Payments p ON b.booking_id = p.booking_id;


ALTER TABLE Shows ADD COLUMN remaining_seats INT;

-- Initialize it with theatre capacity
UPDATE Shows s
JOIN Theatres t ON s.theatre_id = t.theatre_id
SET s.remaining_seats = t.capacity;


DELIMITER //
CREATE TRIGGER update_remaining_seats
AFTER INSERT ON Bookings
FOR EACH ROW
BEGIN
    UPDATE Shows
    SET remaining_seats = remaining_seats - NEW.seats
    WHERE show_id = NEW.show_id;
END;
//
DELIMITER ;


